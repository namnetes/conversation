Ma classe

class LoadModule:
    """
    La classe LoadModule contient toutes les informations extraites du fichier
    des VLM File Manager.
    """

    def __init__(self):
        """
        Le constructeur de cette classe n'attend aucune valeur d'initialisation.
        """
        self.loadlib = ''
        """ le nom de la LOADLIB parent où est stocké le LOAD MODULE """
        self.module = ''
        """ le nom du LOAD MODULE """
        self.linked_date = ''
        """ la date à laquelle a été Linkédité le LOAD MODULE """
        self.linked_time = ''
        """ l'heure à laquelle a été Linkédité le LOAD MODULE """
        self.size = ''
        """ la taille totale, en octets, du LOAD MODULE """
        self.amode = ''
        """
        AMODE signifie Addressing Mode et est utilisé pour spécifier le mode
        d'adressage du module sous le contrôle du système d'exploitation z/OS.

        Ce paramètre peut prendre les valeurs 24, 31 ou 64 pour spécifier
        l'utilisation de 24 bits, 31 bits ou 64 bits pour les adresses.

        Ce mode d'adressage détermine la plage d'adresses que le programme
        peut utiliser pour stocker ses données et ses instructions.
        """
        self.rmode = ''
        """
        RMODE signifie Residency Mode et est utilisé pour spécifier le mode
        de résidence des instructions et des données pour un module dans la
        mémoire sous le contrôle du système d'exploitation z/OS.

        RMODE(24) : indique que le module doit être chargé dans la zone de
                    24 bits de la mémoire centrale. Ce mode limite la plage
                    d'adresses accessibles aux 16 Mo de la mémoire. Il est
                    utilisé pour les programmes plus petits qui ne nécessitent
                    pas beaucoup de mémoire.

        RMODE(31) : indique que le module doit être chargé dans la zone de
                    31 bits de la mémoire centrale. Ce mode permet d'accéder
                    à une plage d'adresses plus grande, allant jusqu'à 2 Go
                    de mémoire. Il est utilisé pour les programmes plus grands
                    qui nécessitent plus de mémoire.

        RMODE(ANY) : indique que le système doit charger le module dans
                    n'importe quelle zone de la mémoire, qu'elle soit de
                    24 bits ou de 31 bits. Ce mode permet de charger des
                    modules qui peuvent être placés dans n'importe quelle
                    zone de la mémoire et qui ne sont pas limités par une
                    plage d'adresses spécifique.

        RMODE(ANYLPA) : indique que le système doit charger le module dans
                    n'importe quelle zone de la mémoire à partir de l'adresse
                    0 (zéro). Ce mode permet de charger des modules qui peuvent
                    être placés dans n'importe quelle zone de la mémoire et qui
                    ne sont pas limités par une plage d'adresses spécifique,
                    mais ils ne peuvent pas être chargés à une adresse
                    supérieure à 16 Mo.
        """
        self.all_csect = []
        """
        Liste de dictionnaires contenant :
        - ['name'] le nom de la CSECT
        - ['address'] Address/Offset de la SCECT
        - ['size'] la taille du module de la CSECT
        - ['compiler'] le compilateur utilisé pour générer le module associé à la CSECT
        """
    def __str__(self):
        """
        Affiche tous les attributs de la classe sur la sortie standard, stdout.
        Chaque attribut est séparé du précédent par un point-virgule.
        """

        output = ''
        for item in self.all_csect:
            output+=(f"{self.module};"
                       f"{self.loadlib};"
                       f"{self.linked_date};"
                       f"{self.linked_time};"
                       f"{self.size};"
                       f"{self.amode};"
                       f"{self.rmode};"
                       f"{item['name']};"
                       f"{item['size']};"
                       f"{item['compiler']}")

        return output

    def reset(self):
        """
        Réinitialisez les attributs de classe à leurs valeurs par défaut.
        """
        self.__init__()

Et ici le traitement pour renseigner mon dictionnaire csect et ajouter ce dictionnaire à la liste des disctionnaires

        # Traitement des csect
        if csect_table_start:
            csect['name'] = ligne.split()[0]
            csect['address'] = ligne.split()[2]
            csect['size'] = ligne.split()[3]
            csect['compiler'] = ligne[56:84]
            lm.all_csect.append(csect)
